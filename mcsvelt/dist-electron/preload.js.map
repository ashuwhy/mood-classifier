{"version":3,"file":"preload.js","sources":["../electron/preload.ts"],"sourcesContent":["// All of the Node.js APIs are available in the preload process.\n// It has the same sandbox as a Chrome extension.\nconst { contextBridge, ipcRenderer, webFrame } = require('electron');\n\n// Type definitions to help with TypeScript\ninterface IpcRendererEvent {\n  sender: any;\n  senderId: number;\n}\n\n// Define interface for exposed functions\ninterface ElectronAPI {\n  invoke: (channel: string, data?: any) => Promise<any>;\n  send: (channel: string, data?: any) => void;\n  receive: (channel: string, func: (...args: any[]) => void) => void;\n  openExternal: (url: string) => void;\n}\n\n// Define interface for app info\ninterface AppInfo {\n  version: string;\n  platform: string;\n}\n\n// Valid channels for send/receive/invoke operations\nconst validSendChannels = ['toMain', 'requestData', 'logEvent', 'openExternalLink'];\nconst validReceiveChannels = ['fromMain', 'responseData', 'appUpdate'];\nconst validInvokeChannels = [\n  'download-youtube-audio',\n  'read-audio-file',\n  'toggle-enabled',\n  'recognize-music',\n  'save-temp-file',\n  'fetch-image',\n  'cleanup-temp-files',\n  'getData',\n  'performAction',\n  'checkStatus',\n  'demucs:separate',\n  'electron:showItemInFolder',\n  'check-demucs-installed',\n  'electron:readAudioFile',\n  'demucs:cancelSeparation'\n];\n\n// Expose protected methods that allow the renderer process to use\n// the ipcRenderer without exposing the entire object\ncontextBridge.exposeInMainWorld('api', {\n  // Invoke methods and get responses (Promise)\n  invoke: async (channel: string, data?: any): Promise<any> => {\n    if (validInvokeChannels.includes(channel)) {\n      return await ipcRenderer.invoke(channel, data);\n    }\n    throw new Error(`Invalid invoke channel: ${channel}`);\n  },\n  \n  // Send messages to main process\n  send: (channel: string, data?: any): void => {\n    if (validSendChannels.includes(channel)) {\n      ipcRenderer.send(channel, data);\n    }\n  },\n  \n  // Receive messages from main process\n  receive: (channel: string, func: (...args: any[]) => void): void => {\n    if (validReceiveChannels.includes(channel)) {\n      // Deliberately strip event as it includes `sender` \n      ipcRenderer.on(channel, (_event: Electron.IpcRendererEvent, ...args: any[]) => func(...args));\n    }\n  },\n  \n  // Helper to open external links\n  openExternal: (url: string): void => {\n    ipcRenderer.send('openExternalLink', url);\n  }\n} as ElectronAPI);\n\n// Expose app information \ncontextBridge.exposeInMainWorld('appInfo', {\n  version: process.env.APP_VERSION || '1.0.0',\n  platform: process.platform\n} as AppInfo);\n\n// Prevent using eval() and new Function() for security reasons\ncontextBridge.exposeInMainWorld('secureEval', {\n  safeEval: (code: string) => {\n    // This is a stub that does nothing - eval is inherently unsafe\n    console.warn('Eval attempt blocked for security reasons');\n    return null;\n  }\n});\n\n// Initialize performance optimization helpers when preload starts\n// This runs before the renderer loads to prepare things\nconst initOptimizations = (): void => {\n  // Disable zoom functionality for performance\n  if (webFrame) {\n    webFrame.setZoomFactor(1);\n    webFrame.setVisualZoomLevelLimits(1, 1);\n  }\n};\n\ninitOptimizations();\n\n// Setup link handling in the DOM\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Handle all link clicks to open in external browser\n  document.addEventListener('click', (event) => {\n    const element = event.target as HTMLElement;\n    const linkElement = element.closest('a') as HTMLAnchorElement;\n    \n    if (linkElement && linkElement.href && linkElement.href.startsWith('http')) {\n      event.preventDefault();\n      ipcRenderer.send('openExternalLink', linkElement.href);\n    }\n  });\n});\n\n// Store callback for cancellation\nlet cancelCallback: (() => void) | null = null;\n\n// Expose protected methods that allow the renderer process to use\n// the ipcRenderer without exposing the entire object\ncontextBridge.exposeInMainWorld('demucsAPI', {\n  separate: (filePath: string) => ipcRenderer.invoke('demucs:separate', filePath),\n  checkInstalled: () => ipcRenderer.invoke('check-demucs-installed'),\n  // Add cancellation support\n  cancelSeparation: (separationId: string) => ipcRenderer.invoke('demucs:cancelSeparation', separationId),\n  // Register callback for when the app is about to reload/close\n  registerCancelCallback: (callback: () => void) => {\n    cancelCallback = callback;\n  },\n  // Add progress listener\n  onProgress: (progressChannel: string, callback: (progress: number) => void) => {\n    const listener = (_: any, data: any) => {\n      callback(data.progress);\n    };\n    ipcRenderer.on(progressChannel, listener);\n    return () => {\n      ipcRenderer.removeListener(progressChannel, listener);\n    };\n  }\n});\n\n// Listen for renderer process reloads to call the cancel callback\nwindow.addEventListener('unload', () => {\n  if (cancelCallback) {\n    cancelCallback();\n  }\n});\n\n// Add this API for file system operations\ncontextBridge.exposeInMainWorld('electron', {\n  showItemInFolder: (filePath: string) => ipcRenderer.invoke('electron:showItemInFolder', filePath),\n  readAudioFile: (filePath: string) => ipcRenderer.invoke('electron:readAudioFile', filePath),\n}); "],"names":[],"mappings":"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"}