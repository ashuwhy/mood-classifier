{"version":3,"file":"main-Cyanwvnh.js","sources":["../node_modules/dotenv/lib/main.js","../electron/main.ts"],"sourcesContent":["const fs = require('fs')\nconst path = require('path')\nconst os = require('os')\nconst crypto = require('crypto')\nconst packageJson = require('../package.json')\n\nconst version = packageJson.version\n\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg\n\n// Parse src into an Object\nfunction parse (src) {\n  const obj = {}\n\n  // Convert buffer to string\n  let lines = src.toString()\n\n  // Convert line breaks to same format\n  lines = lines.replace(/\\r\\n?/mg, '\\n')\n\n  let match\n  while ((match = LINE.exec(lines)) != null) {\n    const key = match[1]\n\n    // Default undefined or null to empty string\n    let value = (match[2] || '')\n\n    // Remove whitespace\n    value = value.trim()\n\n    // Check if double quoted\n    const maybeQuote = value[0]\n\n    // Remove surrounding quotes\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2')\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n')\n      value = value.replace(/\\\\r/g, '\\r')\n    }\n\n    // Add to object\n    obj[key] = value\n  }\n\n  return obj\n}\n\nfunction _parseVault (options) {\n  const vaultPath = _vaultPath(options)\n\n  // Parse .env.vault\n  const result = DotenvModule.configDotenv({ path: vaultPath })\n  if (!result.parsed) {\n    const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`)\n    err.code = 'MISSING_DATA'\n    throw err\n  }\n\n  // handle scenario for comma separated keys - for use with key rotation\n  // example: DOTENV_KEY=\"dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenvx.com/vault/.env.vault?environment=prod\"\n  const keys = _dotenvKey(options).split(',')\n  const length = keys.length\n\n  let decrypted\n  for (let i = 0; i < length; i++) {\n    try {\n      // Get full key\n      const key = keys[i].trim()\n\n      // Get instructions for decrypt\n      const attrs = _instructions(result, key)\n\n      // Decrypt\n      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key)\n\n      break\n    } catch (error) {\n      // last key\n      if (i + 1 >= length) {\n        throw error\n      }\n      // try next key\n    }\n  }\n\n  // Parse decrypted .env string\n  return DotenvModule.parse(decrypted)\n}\n\nfunction _warn (message) {\n  console.log(`[dotenv@${version}][WARN] ${message}`)\n}\n\nfunction _debug (message) {\n  console.log(`[dotenv@${version}][DEBUG] ${message}`)\n}\n\nfunction _dotenvKey (options) {\n  // prioritize developer directly setting options.DOTENV_KEY\n  if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {\n    return options.DOTENV_KEY\n  }\n\n  // secondary infra already contains a DOTENV_KEY environment variable\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n    return process.env.DOTENV_KEY\n  }\n\n  // fallback to empty string\n  return ''\n}\n\nfunction _instructions (result, dotenvKey) {\n  // Parse DOTENV_KEY. Format is a URI\n  let uri\n  try {\n    uri = new URL(dotenvKey)\n  } catch (error) {\n    if (error.code === 'ERR_INVALID_URL') {\n      const err = new Error('INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development')\n      err.code = 'INVALID_DOTENV_KEY'\n      throw err\n    }\n\n    throw error\n  }\n\n  // Get decrypt key\n  const key = uri.password\n  if (!key) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing key part')\n    err.code = 'INVALID_DOTENV_KEY'\n    throw err\n  }\n\n  // Get environment\n  const environment = uri.searchParams.get('environment')\n  if (!environment) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing environment part')\n    err.code = 'INVALID_DOTENV_KEY'\n    throw err\n  }\n\n  // Get ciphertext payload\n  const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`\n  const ciphertext = result.parsed[environmentKey] // DOTENV_VAULT_PRODUCTION\n  if (!ciphertext) {\n    const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`)\n    err.code = 'NOT_FOUND_DOTENV_ENVIRONMENT'\n    throw err\n  }\n\n  return { ciphertext, key }\n}\n\nfunction _vaultPath (options) {\n  let possibleVaultPath = null\n\n  if (options && options.path && options.path.length > 0) {\n    if (Array.isArray(options.path)) {\n      for (const filepath of options.path) {\n        if (fs.existsSync(filepath)) {\n          possibleVaultPath = filepath.endsWith('.vault') ? filepath : `${filepath}.vault`\n        }\n      }\n    } else {\n      possibleVaultPath = options.path.endsWith('.vault') ? options.path : `${options.path}.vault`\n    }\n  } else {\n    possibleVaultPath = path.resolve(process.cwd(), '.env.vault')\n  }\n\n  if (fs.existsSync(possibleVaultPath)) {\n    return possibleVaultPath\n  }\n\n  return null\n}\n\nfunction _resolveHome (envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\n}\n\nfunction _configVault (options) {\n  const debug = Boolean(options && options.debug)\n  if (debug) {\n    _debug('Loading env from encrypted .env.vault')\n  }\n\n  const parsed = DotenvModule._parseVault(options)\n\n  let processEnv = process.env\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv\n  }\n\n  DotenvModule.populate(processEnv, parsed, options)\n\n  return { parsed }\n}\n\nfunction configDotenv (options) {\n  const dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding = 'utf8'\n  const debug = Boolean(options && options.debug)\n\n  if (options && options.encoding) {\n    encoding = options.encoding\n  } else {\n    if (debug) {\n      _debug('No encoding is specified. UTF-8 is used by default')\n    }\n  }\n\n  let optionPaths = [dotenvPath] // default, look for .env\n  if (options && options.path) {\n    if (!Array.isArray(options.path)) {\n      optionPaths = [_resolveHome(options.path)]\n    } else {\n      optionPaths = [] // reset default\n      for (const filepath of options.path) {\n        optionPaths.push(_resolveHome(filepath))\n      }\n    }\n  }\n\n  // Build the parsed data in a temporary object (because we need to return it).  Once we have the final\n  // parsed data, we will combine it with process.env (or options.processEnv if provided).\n  let lastError\n  const parsedAll = {}\n  for (const path of optionPaths) {\n    try {\n      // Specifying an encoding returns a string instead of a buffer\n      const parsed = DotenvModule.parse(fs.readFileSync(path, { encoding }))\n\n      DotenvModule.populate(parsedAll, parsed, options)\n    } catch (e) {\n      if (debug) {\n        _debug(`Failed to load ${path} ${e.message}`)\n      }\n      lastError = e\n    }\n  }\n\n  let processEnv = process.env\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv\n  }\n\n  DotenvModule.populate(processEnv, parsedAll, options)\n\n  if (lastError) {\n    return { parsed: parsedAll, error: lastError }\n  } else {\n    return { parsed: parsedAll }\n  }\n}\n\n// Populates process.env from .env file\nfunction config (options) {\n  // fallback to original dotenv if DOTENV_KEY is not set\n  if (_dotenvKey(options).length === 0) {\n    return DotenvModule.configDotenv(options)\n  }\n\n  const vaultPath = _vaultPath(options)\n\n  // dotenvKey exists but .env.vault file does not exist\n  if (!vaultPath) {\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`)\n\n    return DotenvModule.configDotenv(options)\n  }\n\n  return DotenvModule._configVault(options)\n}\n\nfunction decrypt (encrypted, keyStr) {\n  const key = Buffer.from(keyStr.slice(-64), 'hex')\n  let ciphertext = Buffer.from(encrypted, 'base64')\n\n  const nonce = ciphertext.subarray(0, 12)\n  const authTag = ciphertext.subarray(-16)\n  ciphertext = ciphertext.subarray(12, -16)\n\n  try {\n    const aesgcm = crypto.createDecipheriv('aes-256-gcm', key, nonce)\n    aesgcm.setAuthTag(authTag)\n    return `${aesgcm.update(ciphertext)}${aesgcm.final()}`\n  } catch (error) {\n    const isRange = error instanceof RangeError\n    const invalidKeyLength = error.message === 'Invalid key length'\n    const decryptionFailed = error.message === 'Unsupported state or unable to authenticate data'\n\n    if (isRange || invalidKeyLength) {\n      const err = new Error('INVALID_DOTENV_KEY: It must be 64 characters long (or more)')\n      err.code = 'INVALID_DOTENV_KEY'\n      throw err\n    } else if (decryptionFailed) {\n      const err = new Error('DECRYPTION_FAILED: Please check your DOTENV_KEY')\n      err.code = 'DECRYPTION_FAILED'\n      throw err\n    } else {\n      throw error\n    }\n  }\n}\n\n// Populate process.env with parsed values\nfunction populate (processEnv, parsed, options = {}) {\n  const debug = Boolean(options && options.debug)\n  const override = Boolean(options && options.override)\n\n  if (typeof parsed !== 'object') {\n    const err = new Error('OBJECT_REQUIRED: Please check the processEnv argument being passed to populate')\n    err.code = 'OBJECT_REQUIRED'\n    throw err\n  }\n\n  // Set process.env\n  for (const key of Object.keys(parsed)) {\n    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {\n      if (override === true) {\n        processEnv[key] = parsed[key]\n      }\n\n      if (debug) {\n        if (override === true) {\n          _debug(`\"${key}\" is already defined and WAS overwritten`)\n        } else {\n          _debug(`\"${key}\" is already defined and was NOT overwritten`)\n        }\n      }\n    } else {\n      processEnv[key] = parsed[key]\n    }\n  }\n}\n\nconst DotenvModule = {\n  configDotenv,\n  _configVault,\n  _parseVault,\n  config,\n  decrypt,\n  parse,\n  populate\n}\n\nmodule.exports.configDotenv = DotenvModule.configDotenv\nmodule.exports._configVault = DotenvModule._configVault\nmodule.exports._parseVault = DotenvModule._parseVault\nmodule.exports.config = DotenvModule.config\nmodule.exports.decrypt = DotenvModule.decrypt\nmodule.exports.parse = DotenvModule.parse\nmodule.exports.populate = DotenvModule.populate\n\nmodule.exports = DotenvModule\n","import { app, BrowserWindow, session, shell, ipcMain, dialog } from 'electron'\nimport path from 'path'\nimport { fileURLToPath } from 'url'\nimport fs from 'fs'\nimport dotenv from 'dotenv'\n\n// Define FFmpegProgress interface\ninterface FFmpegProgress {\n  percent: number;\n  frames?: number;\n  currentFps?: number;\n  currentKbps?: number;\n  targetSize?: number;\n  timemark?: string;\n}\n\n// Load environment variables\ndotenv.config()\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url))\n// Change how development mode is determined - ensure it's only true when explicitly set\nconst isDev = process.env.NODE_ENV === 'development' && process.argv.indexOf('--dev') !== -1\n\n// Handle creating/removing shortcuts on Windows when installing/uninstalling\nif (process.platform === 'win32') {\n  app.setAppUserModelId(app.getName())\n}\n\nlet mainWindow: BrowserWindow | null = null\n\n/**\n * Get the app data path based on platform\n */\nfunction getAppDataPath(): string {\n  const appName = 'MoodClassifier'\n  switch (process.platform) {\n    case \"darwin\": {\n      return path.join(process.env.HOME || '', \"Library\", \"Application Support\", appName)\n    }\n    case \"win32\": {\n      return path.join(process.env.APPDATA || '', appName)\n    }\n    case \"linux\": {\n      return path.join(process.env.HOME || '', `.${appName}`)\n    }\n    default: {\n      console.log(\"Unsupported platform!\")\n      process.exit(1)\n      return ''\n    }\n  }\n}\n\n// Create app data directory if it doesn't exist\nconst appDataPath = getAppDataPath()\nif (!fs.existsSync(appDataPath)) {\n  fs.mkdirSync(appDataPath, { recursive: true })\n}\n\n// Lazy imports for youtube-dl and ffmpeg\nlet youtubeDlExec: any\nlet ffmpeg: any\n\nasync function createWindow() {\n  console.log('Creating window...')\n  console.log('Development mode:', isDev)\n  \n  // Add performance optimizing command line switches\n  app.commandLine.appendSwitch('enable-zero-copy')\n  app.commandLine.appendSwitch('enable-gpu-rasterization')\n  app.commandLine.appendSwitch('enable-native-gpu-memory-buffers')\n  app.commandLine.appendSwitch('canvas-msaa-sample-count', '0')  // Disable antialiasing for performance\n  app.commandLine.appendSwitch('disable-smooth-scrolling')  // Disable smooth scrolling for performance\n  app.commandLine.appendSwitch('ignore-gpu-blocklist')\n  \n  // Get preload script path\n  const preloadScriptPath = path.join(__dirname, 'preload.js')\n  console.log('Preload script path:', preloadScriptPath)\n  \n  // Create the browser window - initially hidden for faster perceived startup\n  mainWindow = new BrowserWindow({\n    width: 1200,\n    height: 800,\n    show: false, // Start hidden for performance\n    backgroundColor: '#0a0a0a', // Set background color to reduce flicker\n    webPreferences: {\n      nodeIntegration: false, // Disable node integration for security\n      contextIsolation: true, // Enable context isolation for security\n      sandbox: true, // Enable sandbox for additional security\n      preload: preloadScriptPath, // Use preload script for safe API exposure\n      disableBlinkFeatures: 'Auxclick', // Disable potentially dangerous features\n      webSecurity: true, // Ensure web security is enabled\n      allowRunningInsecureContent: false, // Prevent loading of insecure content\n      backgroundThrottling: false, // Prevent throttling when in background\n      enableWebSQL: false, // Disable deprecated WebSQL\n      spellcheck: false, // Disable spellcheck for performance\n      v8CacheOptions: 'code', // Enable V8 code caching for better JS performance\n    },\n    autoHideMenuBar: true, // Hide menu bar for cleaner UI\n    frame: true,\n    titleBarStyle: 'default',\n  })\n\n  // Set strict Content Security Policy - removed unsafe-eval\n  session.defaultSession.webRequest.onHeadersReceived({urls: ['*://*/*']}, (details, callback) => {\n    const headers = { ...details.responseHeaders };\n    // Remove any existing Content-Security-Policy headers\n    Object.keys(headers).forEach(key => {\n      if (key.toLowerCase() === 'content-security-policy') {\n        delete headers[key];\n      }\n    });\n    headers['Content-Security-Policy'] = [\n      \"default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net blob:; script-src-elem 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net blob:; object-src 'none'; style-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com; img-src 'self' data: https://*; media-src 'self' blob:; connect-src 'self' https://*; worker-src 'self' blob:; font-src 'self' https://fonts.gstatic.com https://cdnjs.cloudflare.com; frame-src 'none';\"\n    ];\n    callback({ responseHeaders: headers });\n  })\n\n  // Prevent navigation to untrusted origins\n  mainWindow.webContents.on('will-navigate', (event, url) => {\n    const parsedUrl = new URL(url)\n    const validOrigins = ['localhost', '127.0.0.1'] // Add your app's domains here\n    \n    if (!isDev && !validOrigins.includes(parsedUrl.hostname)) {\n      event.preventDefault()\n      // Open external links in default browser instead of blocking them\n      shell.openExternal(url)\n      console.log(`External navigation to ${url} opened in default browser`)\n    }\n  })\n\n  // Handle link clicks properly\n  mainWindow.webContents.setWindowOpenHandler(({ url }) => {\n    // Open links in external browser\n    shell.openExternal(url)\n    return { action: 'deny' } // Prevent creating new electron windows\n  })\n\n  // Load the app\n  try {\n    if (isDev) {\n      // Load from dev server\n      console.log('Loading from dev server: http://localhost:5173')\n      await mainWindow.loadURL('http://localhost:5173')\n      // Open DevTools in development mode\n      // mainWindow.webContents.openDevTools({ mode: 'detach' })\n    } else {\n      // Load the index.html when not in development\n      const filePath = path.join(__dirname, '../dist/index.html')\n      console.log('Loading from file:', filePath)\n      // Check if the file exists before loading\n      if (fs.existsSync(filePath)) {\n        await mainWindow.loadFile(filePath)\n      } else {\n        console.error(`File not found: ${filePath}`)\n        throw new Error(`Could not find index.html at ${filePath}. Make sure the app is built correctly.`)\n      }\n    }\n  } catch (error) {\n    console.error('Error loading content:', error)\n  }\n\n  // Only show window when content is loaded - reduces perceived lag\n  mainWindow.once('ready-to-show', () => {\n    console.log('Window ready to show')\n    mainWindow?.show()\n  })\n\n  // Emitted when the window is closed\n  mainWindow.on('closed', () => {\n    mainWindow = null\n  })\n}\n\n// Optimize startup by doing heavy initialization work after the app is visible\nasync function optimizeStartup() {\n  console.log('Starting application initialization...')\n  \n  // IPC handler for opening external links\n  ipcMain.handle('openExternalLink', (event, url) => {\n    // Validate URL for security\n    try {\n      const parsedUrl = new URL(url)\n      if (parsedUrl.protocol === 'http:' || parsedUrl.protocol === 'https:') {\n        shell.openExternal(url)\n        console.log(`Opened external URL: ${url}`)\n        return { success: true }\n      } else {\n        console.warn(`Blocked opening non-HTTP URL: ${url}`)\n        return { error: 'Invalid URL protocol' }\n      }\n    } catch (error) {\n      console.error(`Invalid URL received: ${url}`)\n      return { error: 'Invalid URL format' }\n    }\n  })\n\n  // Handle YouTube audio downloads\n  ipcMain.handle('download-youtube-audio', async (event, url) => {\n    try {\n      console.log('Downloading YouTube audio...')\n      return await downloadWithYtDlp(url)\n    } catch (error: any) {\n      console.error('Error downloading with yt-dlp:', error.message)\n      throw new Error(`Failed to download YouTube audio: ${error.message}`)\n    }\n  })\n\n  // Handle audio file reading\n  ipcMain.handle('read-audio-file', async (event, filePath) => {\n    try {\n      // Handle the case where filePath is an object\n      if (typeof filePath === 'object') {\n        if (filePath.filePath) {\n          filePath = filePath.filePath\n        } else {\n          throw new Error('Invalid file path object provided')\n        }\n      }\n      \n      // Validate that we have a string path\n      if (typeof filePath !== 'string') {\n        throw new Error('Invalid file path provided')\n      }\n\n      const buffer = await fs.promises.readFile(filePath)\n      return buffer\n    } catch (error) {\n      console.error('Error reading audio file:', error)\n      throw error\n    }\n  })\n\n  // Handle toggle-enabled request\n  ipcMain.handle('toggle-enabled', async (event, enabled) => {\n    try {\n      return { success: true, enabled }\n    } catch (error) {\n      console.error('Error toggling enabled state:', error)\n      throw error\n    }\n  })\n  \n  // Reduce startup impact by controlling when GPU processes start\n  app.commandLine.appendSwitch('enable-features', 'CalculateNativeWinOcclusion')\n  \n  // Explicitly set memory limits to prevent excessive memory usage\n  app.commandLine.appendSwitch('js-flags', '--max-old-space-size=512')\n  \n  // Reduce power usage when app is in background\n  app.on('browser-window-blur', () => {\n    if (mainWindow && !isDev) {\n      mainWindow.webContents.setBackgroundThrottling(true)\n    }\n  })\n  \n  app.on('browser-window-focus', () => {\n    if (mainWindow && !isDev) {\n      mainWindow.webContents.setBackgroundThrottling(false)\n    }\n  })\n\n  // Create a single instance lock - prevents multiple instances\n  const gotTheLock = app.requestSingleInstanceLock()\n  if (!gotTheLock) {\n    console.log('Another instance is already running. Quitting...')\n    app.quit()\n    return\n  }\n\n  // Focus the main window if a second instance tries to launch\n  app.on('second-instance', () => {\n    if (mainWindow) {\n      if (mainWindow.isMinimized()) mainWindow.restore()\n      mainWindow.focus()\n    }\n  })\n\n  // Initialize app when ready\n  await app.whenReady()\n  console.log('Electron app ready, creating window...')\n  createWindow()\n\n  app.on('activate', () => {\n    // On macOS it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (mainWindow === null) createWindow()\n  })\n}\n\n/**\n * Download YouTube audio using youtube-dl-exec (yt-dlp)\n * @param url - YouTube URL\n * @returns Promise with file path and video details\n */\nasync function downloadWithYtDlp(url: string): Promise<{\n  filePath: string\n  videoDetails: {\n    title: string\n    author: string\n  }\n}> {\n  // Lazy load youtube-dl-exec\n  if (!youtubeDlExec) {\n    try {\n      // Import using ESM syntax and handle the module structure properly\n      const ytdlModule = await import('youtube-dl-exec')\n      youtubeDlExec = {\n        default: ytdlModule.default\n      }\n      \n      // If needed, we can set up custom binary paths using the module's methods\n      // rather than relying on __dirname\n    } catch (error) {\n      console.error('Failed to load youtube-dl-exec:', error)\n      throw new Error('youtube-dl-exec is not installed. Run: npm install youtube-dl-exec --save')\n    }\n  }\n  \n  // Load ffmpeg\n  if (!ffmpeg) {\n    try {\n      const ffmpegImport = await import('fluent-ffmpeg')\n      ffmpeg = ffmpegImport.default\n      \n      // Try to set ffmpeg path\n      try {\n        const ffmpegStaticImport = await import('ffmpeg-static')\n        ffmpeg.setFfmpegPath(ffmpegStaticImport.default)\n      } catch (err) {\n        console.warn('Could not load ffmpeg-static, using system ffmpeg')\n      }\n    } catch (error) {\n      console.error('Failed to load fluent-ffmpeg:', error)\n      throw new Error('fluent-ffmpeg is not installed. Run: npm install fluent-ffmpeg --save')\n    }\n  }\n  \n  // First get video info for title/author\n  const videoInfo = await youtubeDlExec.default(url, {\n    dumpSingleJson: true,\n    noCheckCertificates: true,\n    noWarnings: true,\n    preferFreeFormats: true,\n    addHeader: [\n      'referer:youtube.com', \n      'user-agent:Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36'\n    ]\n  })\n  \n  // Show save dialog to let user choose where to save the WAV file\n  const { filePath, canceled } = await dialog.showSaveDialog({\n    title: 'Save Audio File',\n    defaultPath: `${videoInfo.title.replace(/[/\\\\?%*:|\"<>]/g, '-')}.wav`,\n    filters: [{ name: 'Audio Files', extensions: ['wav'] }]\n  })\n\n  if (canceled || !filePath) {\n    throw new Error('Save operation was canceled.')\n  }\n\n  // Create a temporary file in the app data directory\n  const tempFile = path.join(appDataPath, `${Date.now()}.m4a`)\n  \n  console.log('Downloading with yt-dlp to:', tempFile)\n  \n  // Download audio with yt-dlp using correct format options\n  await youtubeDlExec.default(url, {\n    output: tempFile,\n    extractAudio: true,\n    audioFormat: 'm4a',     // Using m4a instead of webm\n    audioQuality: '0',      // Best quality - must be a string\n    format: 'bestaudio',    // Get best audio quality\n    noCheckCertificates: true,\n    noWarnings: true,\n    preferFreeFormats: true,\n    addHeader: [\n      'referer:youtube.com', \n      'user-agent:Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36'\n    ]\n  })\n  \n  // Verify the file was created\n  if (!fs.existsSync(tempFile)) {\n    throw new Error('Failed to download the audio file')\n  }\n  \n  console.log('Downloaded audio to temp file:', tempFile)\n  \n  // Then convert the temporary file to WAV\n  return new Promise((resolve, reject) => {\n    ffmpeg(tempFile)\n      .toFormat('wav')\n      .audioCodec('pcm_s16le')\n      .audioChannels(2)\n      .audioFrequency(44100)\n      .on('progress', (progress: FFmpegProgress) => {\n        console.log('FFmpeg processing progress:', progress.percent, '%')\n      })\n      .on('end', () => {\n        console.log('FFmpeg conversion complete')\n        // Clean up temp file\n        fs.unlink(tempFile, (err) => {\n          if (err) console.error('Error deleting temp file:', err)\n        })\n        \n        resolve({\n          filePath,\n          videoDetails: {\n            title: videoInfo.title,\n            author: videoInfo.uploader\n          }\n        })\n      })\n      .on('error', (error: Error) => {\n        // Clean up temp file on error\n        fs.unlink(tempFile, (err) => {\n          if (err) console.error('Error deleting temp file:', err)\n        })\n        \n        console.error('FFmpeg error:', error)\n        reject(error)\n      })\n      .save(filePath)\n  })\n}\n\n// Start the optimized app\ntry {\n  optimizeStartup()\n} catch (error) {\n  console.error('Error during startup:', error)\n}\n\n// Quit when all windows are closed, except on macOS where it's common\n// for applications to stay open until the user quits explicitly with Cmd + Q\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n}) "],"names":["fs","require$$0","path","require$$1","require$$2","version","mainModule"],"mappings":"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","x_google_ignoreList":[0]}